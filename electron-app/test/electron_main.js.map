{"version":3,"file":"electron_main.js","sources":["webpack://electron-app/./src/main/index.ts"],"sourcesContent":["console.log('Start time', new Date().toISOString())\nimport { app, shell, BrowserWindow, ipcMain } from 'electron'\nconsole.log('Post import', new Date().toISOString())\n\n// import { electronApp, optimizer, is } from '@electron-toolkit/utils'\n// import icon from '../../resources/icon.png?asset'\n\nasync function createWindow(): Promise<void> {\n  console.log('Create window', new Date().toISOString())\n\n  // Create the browser window.\n  const mainWindow = new BrowserWindow({\n    width: 1000,\n    height: 670,\n    autoHideMenuBar: true,\n    // ...(process.platform === 'linux' ? { icon } : {}),\n    webPreferences: {\n      // preload: join(__dirname, '../preload/index.js'),\n    },\n  })\n  console.log('Window created', new Date().toISOString())\n  console.log('Window created', new Date().toISOString())\n\n  mainWindow.on('ready-to-show', () => {\n    console.log('Ready to show', new Date().toISOString())\n\n    app.quit()\n    mainWindow.show()\n  })\n\n  mainWindow.webContents.setWindowOpenHandler((details) => {\n    shell.openExternal(details.url)\n    return { action: 'deny' }\n  })\n\n  // HMR for renderer base on electron-vite cli.\n  // Load the remote URL for development or the local html file for production.\n\n  // import { join } from 'path'\n\n  mainWindow.loadURL('http://localhost:9527/renderer')\n  console.log('Loaded URL', new Date().toISOString())\n\n  return\n  const { join } = await import('path')\n  if (process.env.NODE_ENV !== 'production') {\n    mainWindow.loadURL('localhost:9527/renderer')\n    console.log('load remote url', process.env['ELECTRON_RENDERER_URL'])\n    if (process.env['ELECTRON_RENDERER_URL']) {\n      mainWindow.loadURL(process.env['ELECTRON_RENDERER_URL'])\n    } else {\n      const location = join(__dirname, './renderer.html')\n      console.log('load local html file1 ', location)\n      mainWindow.loadFile(location)\n    }\n  } else {\n    const location = join(__dirname, './renderer.html')\n    console.log('load local html file2', location)\n    mainWindow.loadFile(location)\n  }\n}\n\n// This method will be called when Electron has finished\n// initialization and is ready to create browser windows.\n// Some APIs can only be used after this event occurs.\napp.whenReady().then(() => {\n  // Set app user model id for windows\n  // electronApp.setAppUserModelId('com.electron')\n\n  // Default open or close DevTools by F12 in development\n  // and ignore CommandOrControl + R in production.\n  // see https://github.com/alex8088/electron-toolkit/tree/master/packages/utils\n  app.on('browser-window-created', (_, window) => {\n    // optimizer.watchWindowShortcuts(window)\n  })\n\n  // IPC test\n  ipcMain.on('ping', () => console.log('pong'))\n\n  createWindow()\n\n  app.on('activate', function () {\n    // On macOS it's common to re-create a window in the app when the\n    // dock icon is clicked and there are no other windows open.\n    if (BrowserWindow.getAllWindows().length === 0) createWindow()\n  })\n})\n\n// Quit when all windows are closed, except on macOS. There, it's common\n// for applications and their menu bar to stay active until the user quits\n// explicitly with Cmd + Q.\napp.on('window-all-closed', () => {\n  if (process.platform !== 'darwin') {\n    app.quit()\n  }\n})\n\n// In this file you can include the rest of your app\"s specific main process\n// code. You can also put them in separate files and require them here.\n"],"names":["console","Date","app","shell","BrowserWindow","ipcMain","_createWindow","mainWindow","join","location","location1","details","process","__dirname","_","window","createWindow"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAAA,QAAQ,GAAG,CAAC,cAAc,IAAIC,OAAO,WAAW;AACa;AAC7DD,QAAQ,GAAG,CAAC,eAAe,IAAIC,OAAO,WAAW;SAKlCK;WAAAA;;SAAAA;IAAAA,gBAHf,uEAAuE;IACvE,oDAAoD;IAEpD;YAIQC,YAiCEC,MAOEC,UAKFC;;;;oBAhDRV,QAAQ,GAAG,CAAC,iBAAiB,IAAIC,OAAO,WAAW;oBAEnD,6BAA6B;oBACvBM,aAAa,IAAIH,+CAAaA,CAAC;wBACnC,OAAO;wBACP,QAAQ;wBACR,iBAAiB;wBACjB,qDAAqD;wBACrD,gBAAgB;wBAEhB;oBACF;oBACAJ,QAAQ,GAAG,CAAC,kBAAkB,IAAIC,OAAO,WAAW;oBACpDD,QAAQ,GAAG,CAAC,kBAAkB,IAAIC,OAAO,WAAW;oBAEpDM,WAAW,EAAE,CAAC,iBAAiB;wBAC7BP,QAAQ,GAAG,CAAC,iBAAiB,IAAIC,OAAO,WAAW;wBAEnDC,0CAAQ;wBACRK,WAAW,IAAI;oBACjB;oBAEAA,WAAW,WAAW,CAAC,oBAAoB,CAAC,SAACI;wBAC3CR,oDAAkB,CAACQ,QAAQ,GAAG;wBAC9B,OAAO;4BAAE,QAAQ;wBAAO;oBAC1B;oBAEA,8CAA8C;oBAC9C,6EAA6E;oBAE7E,8BAA8B;oBAE9BJ,WAAW,OAAO,CAAC;oBACnBP,QAAQ,GAAG,CAAC,cAAc,IAAIC,OAAO,WAAW;oBAEhD;;;;oBACQO,OAAS,cAATA;oBACR,IAAII,KAAqC,EAAE,EAU1C,MAAM;wBACCF,YAAWF,KAAKK,WAAW;wBACjCb,QAAQ,GAAG,CAAC,yBAAyBU;wBACrCH,WAAW,QAAQ,CAACG;oBACtB;;;;;;IACF;WArDeJ;;AAuDf,wDAAwD;AACxD,yDAAyD;AACzD,sDAAsD;AACtDJ,+CAAa,GAAG,IAAI,CAAC;IACnB,oCAAoC;IACpC,gDAAgD;IAEhD,uDAAuD;IACvD,iDAAiD;IACjD,8EAA8E;IAC9EA,wCAAM,CAAC,0BAA0B,SAACY,GAAGC;IACnC,yCAAyC;IAC3C;IAEA,WAAW;IACXV,4CAAU,CAAC,QAAQ;eAAML,QAAQ,GAAG,CAAC;;IAErCgB;IAEAd,wCAAM,CAAC,YAAY;QACjB,iEAAiE;QACjE,4DAA4D;QAC5D,IAAIE,6DAA2B,GAAG,MAAM,KAAK,GAAGY;IAClD;AACF;AAEA,wEAAwE;AACxE,0EAA0E;AAC1E,2BAA2B;AAC3Bd,wCAAM,CAAC,qBAAqB;IAC1B,IAAIU,QAAQ,QAAQ,KAAK,UAAU;QACjCV,0CAAQ;IACV;AACF,GAEA,4EAA4E;CAC5E,uEAAuE"}